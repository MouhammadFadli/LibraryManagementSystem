#include<iostream>;
#include<cctype>;
#include<string>;
using namespace std;
// Structure to store library books data
struct Global {
	int BookID[100];        //Array to stor book IDs
	string BookTitle[100];	//Array to store Book Titles
	string BookAuthor[100]; // Array to store Book Authors
	bool IsBoroowed[100];	//Book status: true = Available, false = Borrowed
	int bookCount = 0;		//Number of books currently in the system
};
int ReadNumber(string massage) {
	int num;
	cout << massage << endl;
	cin >> num;

	return num;
}
// Function to display the main menu options
void Menu() {
		cout << "\n- - -   Library Mangement System   - - -\n" << endl;
		cout << "1.Add a new book" << endl;
		cout << "2.Display all books" << endl;
		cout << "3.Borrow a book" << endl;
		cout << "4.Return a book" << endl;
		cout << "5.Exit" << endl;
}
// Function to add a new book to the system
void AddBook(Global &contents) {
	cout << "Enter Book ID ((Number))" << endl;
	cin >> contents.BookID[contents.bookCount];
	cin.ignore();
	cout << "Enter Book Title " << endl;
	getline(cin, contents.BookTitle[contents.bookCount]);

	cout << "Enter Author Name" << endl;
	getline(cin, contents.BookAuthor[contents.bookCount]);

	contents.IsBoroowed[contents.bookCount] = true;
	contents.bookCount++;
	cout << "Vook added successfully" << endl;
	cout << "\n************************\n";
}
// Function to display all books with their details and availability status
void DisplayBooks(Global contents) {
	if (contents.bookCount == 0) {
		cout << "No books available" << endl;
		return;
	}
	
	cout << "\nList of all Books\n";
	for (int i = 0; i < contents.bookCount; i++) {
		cout << "[" << i + 1 << "]- " << "Title : " << contents.BookTitle[i] << " || Author : " << contents.BookAuthor[i] << " || ID : " << contents.BookID[i] << " || Status : " << (contents.IsBoroowed[i] ? "Available" : "Borrowed") << endl;
	}
}
// Function to borrow a book by entering its ID
void BorrowBook(Global &contents) {
	int id = ReadNumber("Enter Bood ID to borrow : ");
	for (int i = 0; i < contents.bookCount; i++) {
		if (id == contents.BookID[i]) {
			if (!contents.IsBoroowed[i])
				cout << "Book is alreay borrow" << endl;
			else {
				contents.IsBoroowed[i] = false;
				cout << "Book borrowed succesfully" << endl;
			}
			return;
		}
	}
	cout << "Book not found" << endl;
}
// Function to return a book by entering its ID
void ReturnBook(Global &contents) {
	int id = ReadNumber("Enter Book ID to return : ");

	for (int i = 0; i < contents.bookCount; i++) {
		if (id == contents.BookID[i]) {
			if (contents.IsBoroowed[i]) {
				cout << "Book was not borrowed" << endl;
			}
			else {
				contents.IsBoroowed[i] = true;
				cout << "Book returned successfully" << endl;
			}
			return;
		}

	}
	cout << "Book not found" << endl;
}
// Function receives the user's selection and performs the appropriate operatinos
void PrintMenu(Global contents) {
	int number ;
	do {
		Menu();
		cout << "((choose number))" << endl;
		cin >> number;
		switch (number) {
		case 1: AddBook(contents);
			break;
		case 2: DisplayBooks(contents);
			break;
		case 3: BorrowBook(contents);
			break;
		case 4: ReturnBook(contents);
			break;
		case 5: cout << "Exiting..." << endl;
			break;
		default: cout << "Enter Error  ** You Enter : " <<number<<" **"<< endl;
		}
	} while (number != 5);
}

int main() {
	Global contents;
	PrintMenu(contents);

}
